name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_PUBLIC_KEY: ${{ secrets.ID_RSA_PUB }}
      TF_VAR_PRIVATE_KEY: ${{ secrets.ID_RSA_PEM }}
      TF_VAR_VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      TF_VAR_VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

    defaults:
      run:
        shell: bash
        # working-directory: //some terraform path

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: List Files
      run: |
        pwd
        ls -a
        echo $GITHUB_SHA
        echo $GITHUB_REPOSITORY
        echo $GITHUB_WROKSPACE
        echo "{{ github.token }}"

    - name: Checkout
      uses: actions/checkout@v2

    # - name: Import Secrets
    #   uses: hashicorp/vault-action@v2.3.1
    #   with:
    #     url: ${{ secrets.VAULT_ADDR }}
    #     token: ${{ secrets.VAULT_TOKEN }}
    #     caCertificate: ${{ secrets.VAULT_CA }}
    #     secrets: |
    #         aws/creds/my-role accessKey | AWS_ACCESS_KEY_ID ;
    #         aws/creds/my-role secretKey | AWS_SECRET_ACCESS_KEY ;
    #     run: |
    #       echo $AWS_ACCESS_KEY_ID
    #       echo $AWS_SECRET_ACCESS_KEY
    - name: Import Secrets trying
      uses: hashicorp/vault-action@v2.3.1
      with:
        url: "http://3.17.190.121:8200"
        token: "s.ZzLJJcM4iedCGwEq7a7mytdt"
        secrets: |
              /kv/data/engineering DB_HOST1 | DB1_HOST
        # caCertificate: ${{ secrets.VAULT_CA }}
        # secrets: |
        #     aws/creds/my-role accessKey | AWS_ACCESS_KEY_ID ;
        #     aws/creds/my-role secretKey | AWS_SECRET_ACCESS_KEY ;

    - name: secretossss
      run: |
        echo $DB1_HOST >> key
        cat key

    # aws CLI setup
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Verify Terraform version
      run: terraform --version

    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      continue-on-error: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: false

    # Post Terraform plan as a comment to PR
    - name: Post Terraform plan to PR
      uses: actions/github-script@v2
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve